1) Створити текстовий файл як в першому ДЗ.
2) Сценарій перенести в цей файл.
3) Навпроти кожної дії напишіть команду в GitBash.
4) Створити зовнішній репозиторій із назвою JSON 
	Вкладка Repositories -- New -- Create a new repository
5) Клонувати репозиторій JSON на локальний компьютер
	Зайти в репозиторій JSON (Github) -- Code -- HTTP -- Copied -- GitBush -- git clone посилання
	Відкрити папку
	cd JSON
6) Всередині локального JSON створити файл new.json
	>new.json
7) Додати файл під гіт
	git add .
8) Закомітити файл
	git commit -m "Zakomitit fayl"
9) Надіслати файл на зовнішній репозиторій 
	git push
10) Відредагувати зміст файлу "new.json" - написати інформацію про себе (ПІП, вік, кількість домашніх тварин, майбутня ажана заробітня плата). Все написати в форматі JSON
	vim new.json
	{"Name": "Zulfiie Yahiaieva",
	"Age": 35,
	"Animals": 0,
	"Salary": 700}
	Esc  
	:wq
11) Надіслати зміни на зовнішній репозиторій
	git commit -m "add 4 lines in new.json"
	git push
12) Створити файл "preferences.json"
	>preferences.json
13) У файл "prefereces.json" додати інформацію про свої вподобання (улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку б хотіли відвідати) у форматі JSON
	vim preferences.json
	{"Favourite_movie": "The_Da_Vinci_Code",
	"Favourite_Series": "Friends",
	"Favourite_Food": "Eastern_Cuisine",
	"Favourite_Season": "Spring",
	"The_Country_Wich_I_Wood_Like_To_Visit": "Montenegro"}
14) Створити файл "skills.json". Додати інформацію про скіли, які будуть вивчені на курсі у форматі JSON.
	>skills.json
	vim skills.json
	{
	"Documantation": {
		"Bug-reports", 
		"Test_cases", 
		"Check_lists"
	},
	"Programs": {
		"Postman", 
		"Fidler"},
	"Dev_Tools": {
		"Google Chrome", 
		"FireFox"
	},
	"Mobile_Testing": {
		"Android", 
		"IOS"
	},
	"Basics_SQL": {
		"Create", 
		"Delete", 
		"Drop",
		"Insert Into", 
		"Select", 
		"From", 
		"Where", 
		"Join"
	},
	"Git",
	"Jmeter",
	"Python"}
	Esc	:wq
15) Надіслати одразу 2 фали в зовнішній репозиторій
	git add.
	git commit -m "homework"
	git push
16) На веб інтерфейсі створити файл "bug_report.json"
	 Натиснути Add file - Create new file - Ввести ім'я "bug_report.json"
17) Зробити Commit changes (зберегти) зміни на веб інтерфесі
	Клікнути на Commit New File
18) На веб інтерфейсі модифікувати файл bug_report.json, додати баг репорт в форматі JSON
	{"Summary",
 	"Project",
	"Component",
	"Version",
	"Severity": 
   	{"Blocker", 
   	"Criitical", 
   	"Major", 
   	"Minor", 
  	 "Trivial"},
	"Priority": 
  	 {"High", 
     	 "Medium", 
    	  "Low"},
	"Status",
	"Author",
	"Environment",
	"Steps_to_reproduce",
	"Actual_result",
	"Expected_result",
	"Attachment"}
20) Синхронізувати зовнішній та локальний репозиторій
	 git pull
21) Створити зовнішній репозиторій із назвою XML
	Вкладка Repositories -- New -- Create a new repository
22) Клонувати репозиторій XML на локальний компьютер
	Зайти в репозиторій XML (Github) -- Code -- HTTP -- Copied -- GitBush -- git clone посилання
23) Всередині локального XML створити файл "new.xml"
	cd XML 
	touch new.xml
24) Додати файл під гіт
	git add .
25) Закомітити файл
	git commit -m "Skoro noviy rik"
26) Надіслати файл на зовнішній репозиторій 
	git push
27) Відредагувати зміст файла "new.xml" - написати інформацію про себе (ПІП, вік, кількість домашніх тварин, майбутня бажана зарплата). Все у форматі XML
	vim new.xml
	<xml>
	<name>Zulfiie</name>
	<age>35</age>
	<animals>0</animals>
	<salary>700</salary>
	</xml>
28) Надіслати файл на зовнішній репозиторій 
	git push
29) Створити файл preferences.xml
	touch preferences.xml
30) У файл "prefereces.xml" додати інформацію про свої вподобання (улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку б хотіли відвідати) у форматі XML
	vim preferences.xml
	<xml>
	<favourite_movie>The Da Vinci Code</favourite_movie>
	<favourite_series>Friends</favourite_series>
	<favourite_food>Eastern Cuisine</favourite_food>
	<favourite_season>Spring</favourite_season>
	<the_country_wich_i_wood_like_to_visit>Montenegro</the_country_wich_i_wood_like_to_visit>
	</xml>
31) Створити файл "skills.xml". Додати інформацію про скіли, які будуть вивчені на курсі у форматі XML.
	<documents>bug repodt, test cases, check lists</documents>
	<programs>Postman, Fidler</programs>
	<mobiletesting>Android, IOS</mobiletesting>
	<SQL>Create, Delete, Drop, Insert Into, Select, From</SQL>
32) Зробити коміт в один бік
	git commit
33) Надіслати одразу 2 файли на зовнішній репозиторій
	git push
34) На веб інтерфейсі створити файл "bug_report.xml"
	 Натиснути Add file - Create new file - Ввести ім'я "bug_report.xml"
35) Зробити Commit changes (зберегти) зміни на веб інтерфейсі
	Клікнути на Commit New File
36) На веб інтерфейсі модифікувати файл bug_report.xml. Додати баг репорт в форматі 	XML
	  	<xml>
	<summary>Опис проблеми</summary>
	<project>назва проекту</project>
	<component>назва тестуючого компоненту</componenet>
	<version>версія, на якій було знайдено помилку</version>
	<severity>серйозність</severity>
	<priority>пріорітет</priority>
	<status>статус бага</status>
	<author>автор звіту про баг</author>
	<environment>інформація про оточення, на якому виявлено баг</environment>
	<steps_to_reproduce>кроки відтворення багу</steps_to_reproduce>
	<actual_result>актуальний результат</actual_result>
	<axpected_result>очікуваний результат</expected_result>
	<attachment> файл, скрін відтворення помилки</attachment>
  		</xml>
37) Синхронізувати зовнішній та локальний репозиторій
	 git pull

1) Створити зовнішній репозиторій із назвою TXT
	Вкладка Repositories -- New -- Create a new repository
2) Клонувати репозиторій TXT на локальний компьютер
	Зайти в репозиторій XML (Github) -- Code -- HTTP -- Copied -- GitBush -- git clone посилання
3) Всередині локального TXT створити файл "new.txt"
	cd TXT
	touch new.txt
4) Додати файл під гіт
	git add .
5) Закомітити файл
	git commit -m "Vse bude dobre"
6) Надіслати файл на зовнішній репозиторій 
	git push
7) Відредагувати зміст файлу "new.txt" - написати інформацію про себе (ПІП, вік, кількість домашніх тварин, майбутня ажана заробітня плата). Все написати в форматі TXT
	vim new.txt
	ПІП: Яг'яєва Зульфіє Сейдаметівна. Вік: 35 років. Тварин немає. Бажана зарплата - 700 у.о. після півроку роботи.
	Esc  
	:wq
8) Надіслати зміни на зовнішній репозиторій
	git commit -m ""
	git push
9) Створити "файл preferences.txt"
	touch preferences.txt
10) У файл "prefereces.txt" додати інформацію про свої вподобання (улюблений фільм, улюблений серіал, улюблена їжа, улюблена пора року, країна яку б хотіли відвідати) у форматі TXT
	vim preferences.txt
	Улюблений фільм - "Код Да Вінчі";
	Улюблений серіал - "Друзі";
	Улюблена їжа - Східна кухня;
	Улюблена пора року - Весна;
	Країна, яку ю хотіли відвідати - Чорногорія.
11) Створити файл "skills.txt". Додати інформацію про скіли, які будуть вивчені на курсі у форматі TXT.
	touch skills.txt	
	Інформація про скіли, які будуть вивчені на курсі: 
	документація (баг репорти), програми (Postman, Fidler), мобільне тестування, SQL (Create, Drop, Delete, Insert Into, Select, From) тощо.
12) Зробити коміт в один бік
	git commit
13) Надіслати одразу 2 файли на зовнішній репозиторій
	git push
14) На веб інтерфейсі створити файл "bug_report.txt"
	 Натиснути Add file - Create new file - Ввести ім'я "bug_report.txt"
15) Зробити Commit changes (зберегти) зміни на веб інтерфейсі
	Клікнути на Commit New File
16) На веб інтерфейсі модифікувати файл bug_report.txt, додати баг репорт в форматі TXT.
	Summary (короткий опис) - короткий опис проблеми і тип проблемної ситуації.
	Project (проект) - назва проекту, який тестується.
	Component - назва тестуючого компоненту.
	Version - версія, на якій було знайдено помилку.
	Severity - серйозність (Blocker, Critical, Major, Manor, Trivial).
	Priority - пріорітет (Hogh, Medium, Low).
	Status - статус бага.
	Author - автор звіту про баг.
	Environment - інформація про оточення, на якому виявлено баг.
	Steps to reproduce - кроки відтворення багу.
	Actual Result - актуальний результат.
	Expected result - очікуваний результат.
	Attachment - файл, скрін відтворення помилки.
	Основні: Title, Steps to Reproduce (Кроки відтворення багу), Expected Result (Очікуванй результат), Actual Result (Актуальний результат). 
17) Зробити Commit changes (зберегти) зміни на веб інтерфейсі

18) Синхронізувати зовнішній та локальний репозиторій TXT
	 git pull
